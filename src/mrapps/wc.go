package main

//
// a word-count application "plugin" for MapReduce.
//
// go build -buildmode=plugin wc.go
//

import "../mr"
import "unicode"
import "strings"
import "strconv"

//
// The map function is called once for each file of input. The first
// argument is the name of the input file, and the second is the
// file's complete contents. You should ignore the input file name,
// and look only at the contents argument. The return value is a slice
// of key/value pairs.
//
func Map(filename string, contents string) []mr.KeyValue {
	// function to detect word separators.
	ff := func(r rune) bool { return !unicode.IsLetter(r) } //如果不是 unicode 的字母 的separator

	// split contents into an array of words.
	words := strings.FieldsFunc(contents, ff) //separate 成 word 数组

	kva := []mr.KeyValue{}
	for _, w := range words { //遍历数组
		kv := mr.KeyValue{w, "1"} //生成键值对结构体
		kva = append(kva, kv)     //直接放进去
	}
	return kva
}

//
// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
//
func Reduce(key string, values []string) string {
	// return the number of occurrences of this word.
	return strconv.Itoa(len(values)) //直接返回该 key 的数组长度 , 也就是该 key 的出现次数
}
